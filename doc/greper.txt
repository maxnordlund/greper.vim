*greper.txt*         Trying to make grep commands more useful

           /$$$$$$                                                   ~
          /$$__  $$                                                  ~
         | $$  \__/  /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$ ~
         | $$ /$$$$ /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$ /$$__  $$~
         | $$|_  $$| $$  \__/| $$$$$$$$| $$  \ $$| $$$$$$$$| $$  \__/~
         | $$  \ $$| $$      | $$_____/| $$  | $$| $$_____/| $$      ~
         |  $$$$$$/| $$      |  $$$$$$$| $$$$$$$/|  $$$$$$$| $$      ~
          \______/ |__/       \_______/| $$____/  \_______/|__/      ~
                                       | $$                          ~
                                       | $$                          ~
                                       |__/                          ~

                        Search, the way it should be.

==============================================================================
CONTENTS                                                      *GreperContents*

    1. Intro ...................... |GreperIntro|
    2. Usage ...................... |GreperUsage|
        2.1 Main Command .......... |GreperMainCommand|
            2.1.1 :G[!] ........... |:G|
            2.1.2 :GAdd[!] ........ |:GAdd|
            2.1.3 :LG[!] .......... |:LG|
            2.1.4 :LGAdd[!] ....... |:LGAdd|
        2.2 Utility Commands ...... |GreperUtilityCommands|
            2.2.1 :Ag family ...... |:Ag|
            2.2.2 :Ack family ..... |:Ack|
            2.2.3 :Grep family .... |:Grep|
    3. Mappings ................... |GreperMappings|
        3.1 The Quickfix Window ... |GreperQuickfixMappings|
        3.2 Key bindings .......... |GreperKeyBindings|
    4. License .................... |GreperLicense|
    5. Bugs ....................... |GreperBugs|
    6. Contributing ............... |GreperContributing|
    7. Changelog .................. |GreperChangelog|
    8. Credits .................... |GreperCredits|

==============================================================================
1. Intro                                                         *GreperIntro*

Vim has great support for searching for text inside of files with the |:grep|
and |:vimgrep| family of commands, but using them effectively is not always
easy. Quoting strings, escaping chars, recursing or not, and using the
|quickfix-window| and |location-list-window|.

Greper tries to make searching simpler and familiar.

==============================================================================
2. Usage                                                         *GreperUsage*

This plugin respects user's settings and will not create any of the described
commands in case they already exist. A message will be displayed if it is
unable to do so. Check |:messages|.

------------------------------------------------------------------------------
2.1. Main Command                                          *GreperMainCommand*

Greper will create the |:G| family of commands, using the first utility it
finds, in the following order:

    1) `ag`
    2) `ack`
    3) `grep`

If none of them are present in the system, the plugin will be disabled
completely.

------------------------------------------------------------------------------
2.1.1 :G[!]                                                               *:G*

Usage:
    >
    :G my_variable
<
    Will search for the word 'my_variable' recursively in all files inside the
    current directory. The quickfix window will be opened showing the results,
    and the cursor will jump to the first match found.
    >
    :G! self.run( lib/*.rb
<
    Will search for 'self.run(' (with the dot and parentheses) in all ruby
    files inside lib. The quickfix will be opened showing the results, but the
    cursor will stay on the current position (|:command-bang|), inside the
    current buffer.
    >
    :G! /function \w+\(.*\)/
<
    Will search for function definitions using regular expressions.

Behaves similarly to |:grep|.

------------------------------------------------------------------------------
2.1.2 :GAdd[!]                                                         *:GAdd*

This command will add search results to the quickfix window from a previous
search, instead clearing the results.
    >
    :G some_var
    :GAdd other_var
<
    The first :G command will search for 'some_var'. The second command,
    :GAdd, will search for 'other_var' and it the results to the list of
    results of the first command instead of generating a completely new list,
    and losing the previous results.

Behaves similarly to |:grepadd|.

------------------------------------------------------------------------------
2.1.3 :LG[!]                                                             *:LG*

Similar to |:G|, but uses the |location-list-window| instead of the
|quickfix-window| to show the results.

Behaves similary to |:lgrep|.

------------------------------------------------------------------------------
2.1.4 :LGAdd[!]                                                       *:LGAdd*

Similar to |:LG|, but uses the |location-list-window| instead of the
|quickfix-window| to show the results.

Behaves similary to |:lgrepadd|.

------------------------------------------------------------------------------
2.2 Utility Commands                                   *GreperUtilityCommands*

Greper will try to find known utilities in the system, and create the
following commands for each one it recognizes.

------------------------------------------------------------------------------
2.2.1 :Ag family                               *:Ag* *:AgAdd* *:LAg* *:LAgAdd*

The `:Ag` family of commands is created if `ag` is found on the system.

For usage info, refer to |:G|.

For more information on `ag` a.k.a "the silver surfer", go to:

    http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/
    https://github.com/ggreer/the_silver_searcher

------------------------------------------------------------------------------
2.2.2 :Ack family                          *:Ack* *:AckAdd* *:LAck* *:LAckAdd*

The `:Ack` family of commands is created if `ack` is found on the system.

For usage info, refer to |:G|.

For more information on `ack`, go to:

    http://betterthangrep.com/
    https://github.com/petdance/ack

------------------------------------------------------------------------------
2.2.3 :Grep family                     *:Grep* *:GrepAdd* *:LGrep* *:LGrepAdd*

The `:Grep` family of commands is created if `grep` if found on the system.

If you do not have `grep` on your system...

==============================================================================
3. Mappings                                                   *GreperMappings*

------------------------------------------------------------------------------
3.1 The Quickfix Window                               *GreperQuickfixMappings*

The search results will be shown inside the |quickfix| (or the
|location-list|).  This plugin will create the following mappings inside that
window, to easily navigate and preview the results:

o               Open the file under the cursor inside the current window.
go              Preview the file under the cursor in the current window (but
                keep focus inside the quickfix window).
s               Open the file in a horizontal split.
gs              Preview the file in a horizontal split.
v               Open the file in a vertical split.
gv              Preview the file in a vertical split.
t               Open the file in a new tab page.
gt              Silently open the file in a new tab page.
q               Closes the quickfix (or location list) window.

------------------------------------------------------------------------------
3.2 Key bindings                                           *GreperKeyBindings*

This plugin provides helpful mappings for common use cases.

<Plug>Greper    Searches for the word under the cursor, show the results and
                jumps to it.

<Plug>Greper!   Searches for the word under the cursor, show the results and
                stays put.

For example, add this to your |.vimrc|:
    >
    :nmap <silent> <leader>a <Plug>Greper!
<
    Note: Using |:noremap| will not work with <Plug> mappings.

==============================================================================
4. License                                                     *GreperLicense*

Released under the MIT License.

==============================================================================
5. Bugs                                                           *GreperBugs*

Before submitting a bug report, try upgrading to the latest version of the
plugin. The bug could have been fixed already.

If the problem persists, go to:

    https://github.com/zehrizzatti/greper.vim/issues

Check the list of open issues and see if the problem you are facing has not
been reported already. You can add more information to the issue in case it
has. Otherwise, submit a new issue.

==============================================================================
6. Contributing                                           *GreperContributing*

Contributions are welcomed and appreciated. Just follow the normal Github
procedure. Go to:

    https://github.com/zehrizzatti/greper.vim

Fork the project. Work on what you think would make it better. Send a pull
request.

==============================================================================
7. Changelog                                                 *GreperChangelog*

Refer to CHANGELOG.txt

==============================================================================
8. Credits                                                    *GreperCredits*

TODO

" vim: ft=help
